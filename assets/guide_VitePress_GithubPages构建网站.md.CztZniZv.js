import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.YJbRpb8Y.js";const p="/AiHub-Docs/assets/image-20240817094108939.4zxnXceM.png",t="/AiHub-Docs/assets/image-20240817095415843.DcGxjH_U.png",l="/AiHub-Docs/assets/image-20240817095935364.hvFI8Bkr.png",e="/AiHub-Docs/assets/image-20240817100135489.CvIkKD8q.png",h="/AiHub-Docs/assets/image-20240817103033224.CIBDvuKh.png",k="/AiHub-Docs/assets/image-20240817103220309.CwExZn7D.png",r="/AiHub-Docs/assets/image-20240817103717997.DaSFcuXF.png",g="/AiHub-Docs/assets/image-20240817103831576.CRdnwvd6.png",F=JSON.parse('{"title":"VitePress+GithubPages构建网站","description":"","frontmatter":{},"headers":[],"relativePath":"guide/VitePress+GithubPages构建网站.md","filePath":"guide/VitePress+GithubPages构建网站.md"}'),o={name:"guide/VitePress+GithubPages构建网站.md"},c=n('<h1 id="vitepress-githubpages构建网站" tabindex="-1">VitePress+GithubPages构建网站 <a class="header-anchor" href="#vitepress-githubpages构建网站" aria-label="Permalink to &quot;VitePress+GithubPages构建网站&quot;">​</a></h1><p>技术栈：VitePress(编写页面) + Github Action(CI/CD) + GithubPages(服务器)</p><p>注意：使用 GithubPages 必须保证你的仓库是 <strong>public</strong> 的才可以</p><h2 id="编写页面" tabindex="-1">编写页面 <a class="header-anchor" href="#编写页面" aria-label="Permalink to &quot;编写页面&quot;">​</a></h2><p>总体的流程可以参考 <a href="https://vitepress.dev/zh/guide/getting-started" target="_blank" rel="noreferrer">这里</a></p><p>需要注意的只有下面几个点：</p><ol><li><p>vitepress 文件需要和源代码隔离起来</p><p><img src="'+p+'" alt="image-20240817094108939"></p></li><li><p>如何添加一个页面到侧边栏：<a href="/AiHub-Docs/guide/在本网站创建一个文档/#创建一篇文章">指路</a></p></li><li><p><strong>部署时的坑！针对 GithubPages</strong></p><p>由于 GitHubPages 在部署项目之后的域名自动带上项目名称</p><p><img src="'+t+'" alt="image-20240817095415843"></p><p>所以我们需要在 <code>.vitepress/config.mts</code> 文件中配置网站的基础路径，不然会丢失样式</p><p><img src="'+l+'" alt="image-20240817095935364"></p></li><li><p>网站首页使用的图片资源，例如：<code>logo.png</code> 等，建议保存在 public 目录下</p><p><img src="'+e+`" alt="image-20240817100135489"></p></li></ol><h2 id="添加-github-action" tabindex="-1">添加 Github Action <a class="header-anchor" href="#添加-github-action" aria-label="Permalink to &quot;添加 Github Action&quot;">​</a></h2><blockquote><p><a href="https://docs.github.com/zh/actions/writing-workflows/workflow-syntax-for-github-actions" target="_blank" rel="noreferrer">官方文档</a></p></blockquote><p>在项目的根目录下创建一个 <code>.github/workflows</code> 文件夹</p><p>该文件下的所有 yml 文件都会被 github 识别然后根据不同的场景触发(push/pull request.....)指定的 Job</p><p>这里以我们本项目的 <code>deploy.yml</code> 为例子</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 工作流的名称</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 什么时候触发</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # push 即触发，有很多，可以看 https://docs.github.com/zh/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows 这里面</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  	# branches 筛选器，可以指定某一个分支触发了事件后才会工作</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 具体的作业内容</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 这一级是 job_id，必须是字母或者_开头，只能包含字母数字字符、- 或 _,可以创建多个，例如</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ## deploy:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ##   ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ## deploy_2:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ##   ...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  	# 定义执行改作业的机器环境</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  	## 有很多，公用库的可以看这里，感觉用 ubuntu-latest 就好了</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 这个作业会使用的权限，这里因为要把编译后的内容放在存储库中，所以需要 content.write</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    permissions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      contents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">write</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 这里就是具体的作业内容了</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # uses 可以直接引用 docker hub 上的镜像，并使用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      ## 这里的 chekout 是拉取源代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          ## 所有所有历史记录</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          fetch-depth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      ## 使用 pnpm/action-setup@v2 安装 pnpm 包管理器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pnpm/action-setup@v2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          ## 指定 pnpm 的版本，6.x 会报错不知道为啥</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      ## 设置 Node.js 环境并缓存依赖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/setup-node@v3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          node-version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pnpm</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      ## 使用 pnpm 安装项目依赖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pnpm install --frozen-lockfile</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      ## 构建步骤，执行 pnpm docs:build 来构建文档</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Build</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pnpm docs:build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	  ## 使用 peaceiris/actions-gh-pages@v3 可以把构建后的文档部署到我们仓库中 gh-pages 分支</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">peaceiris/actions-gh-pages@v3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          github_token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.GITHUB_TOKEN }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          publish_dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docs/.vitepress/dist</span></span></code></pre></div><blockquote><p>前期不熟，可以直接让 AI 帮忙写或者网上找(搞这个还删了一次库hh)</p></blockquote><p><strong>注意：如果使用的 yml 里用的管理工具时 pnpm/yarn 这类的话，.gitignore 文件中不能忽略对应的 lock 文件</strong></p><p><img src="`+h+'" alt="image-20240817103033224"></p><p>在仓库的 <strong>Action 栏</strong> 可以看到执行的情况</p><p><img src="'+k+'" alt="image-20240817103220309"></p><h2 id="配置-gihubpages" tabindex="-1">配置 GihubPages <a class="header-anchor" href="#配置-gihubpages" aria-label="Permalink to &quot;配置 GihubPages&quot;">​</a></h2><p>按照上述的步骤 deploy success 后仓库会有一个新的分支：<strong>gh-pages</strong></p><p>打开项目的 <strong>Settings</strong> 栏，找到 <strong>Pages</strong>，在这里可以配置我们要部署的分支</p><p><img src="'+r+'" alt="image-20240817103717997"></p><p>这里我们选择刚刚自动重建的 <strong>gh-pages</strong> 分支和 <strong>(root)</strong> ，点击 Save 就可以了</p><p><img src="'+g+'" alt="image-20240817103831576"></p><p>部署后的域名规则：</p><ol><li><strong>仓库名访问</strong>：如果你的 GitHub Pages 部署在了 GitHub 用户名或组织的仓库中，访问地址通常是 <code>https://&lt;username&gt;.github.io/&lt;repository-name&gt;</code>。这里的 <code>&lt;username&gt;</code> 是你的 GitHub 用户名，<code>&lt;repository-name&gt;</code> 是你的仓库名。</li><li><strong>组织页面</strong>：如果你的 GitHub Pages 部署在组织中，访问地址将是 <code>https://&lt;organization&gt;.github.io/&lt;repository-name&gt;</code>。</li></ol><blockquote><p>这里也就是：<a href="https://els-caramelteaegg.github.io/AiHub-Docs/" target="_blank" rel="noreferrer">https://els-caramelteaegg.github.io/AiHub-Docs/</a></p></blockquote>',27),E=[c];function d(y,u,D,A,b,m){return a(),i("div",null,E)}const C=s(o,[["render",d]]);export{F as __pageData,C as default};
